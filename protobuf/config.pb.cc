// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mr {

namespace {

const ::google::protobuf::Descriptor* ConfigProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigProto_DeviceCountEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  ConfigProto_descriptor_ = file->message_type(0);
  static const int ConfigProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, device_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, operation_timeout_in_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, use_per_session_threads_),
  };
  ConfigProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigProto_descriptor_,
      ConfigProto::default_instance_,
      ConfigProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConfigProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, _is_default_instance_));
  ConfigProto_DeviceCountEntry_descriptor_ = ConfigProto_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigProto_descriptor_, &ConfigProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ConfigProto_DeviceCountEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                ConfigProto_DeviceCountEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete ConfigProto::default_instance_;
  delete ConfigProto_reflection_;
}

void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\002mr\"\273\001\n\013ConfigProto\0226\n\014de"
    "vice_count\030\001 \003(\0132 .mr.ConfigProto.Device"
    "CountEntry\022\037\n\027operation_timeout_in_ms\030\002 "
    "\001(\003\022\037\n\027use_per_session_threads\030\003 \001(\010\0322\n\020"
    "DeviceCountEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
    " \001(\005:\0028\001b\006proto3", 216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  ConfigProto::default_instance_ = new ConfigProto();
  ConfigProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigProto::kDeviceCountFieldNumber;
const int ConfigProto::kOperationTimeoutInMsFieldNumber;
const int ConfigProto::kUsePerSessionThreadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigProto::ConfigProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mr.ConfigProto)
}

void ConfigProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConfigProto::ConfigProto(const ConfigProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mr.ConfigProto)
}

void ConfigProto::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  device_count_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  device_count_.SetEntryDescriptor(
      &::mr::ConfigProto_DeviceCountEntry_descriptor_);
  operation_timeout_in_ms_ = GOOGLE_LONGLONG(0);
  use_per_session_threads_ = false;
}

ConfigProto::~ConfigProto() {
  // @@protoc_insertion_point(destructor:mr.ConfigProto)
  SharedDtor();
}

void ConfigProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfigProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigProto_descriptor_;
}

const ConfigProto& ConfigProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

ConfigProto* ConfigProto::default_instance_ = NULL;

ConfigProto* ConfigProto::New(::google::protobuf::Arena* arena) const {
  ConfigProto* n = new ConfigProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigProto::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfigProto*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(operation_timeout_in_ms_, use_per_session_threads_);

#undef ZR_HELPER_
#undef ZR_

  device_count_.Clear();
}

bool ConfigProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mr.ConfigProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, int32> device_count = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_device_count:
          ::google::protobuf::scoped_ptr<ConfigProto_DeviceCountEntry> entry(device_count_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_device_count())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mr.ConfigProto.DeviceCountEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_device_count;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_operation_timeout_in_ms;
        break;
      }

      // optional int64 operation_timeout_in_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_operation_timeout_in_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &operation_timeout_in_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_use_per_session_threads;
        break;
      }

      // optional bool use_per_session_threads = 3;
      case 3: {
        if (tag == 24) {
         parse_use_per_session_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_per_session_threads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mr.ConfigProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mr.ConfigProto)
  return false;
#undef DO_
}

void ConfigProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mr.ConfigProto)
  // map<string, int32> device_count = 1;
  {
    ::google::protobuf::scoped_ptr<ConfigProto_DeviceCountEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->device_count().begin();
        it != this->device_count().end(); ++it) {
      entry.reset(device_count_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "mr.ConfigProto.DeviceCountEntry.key");
    }
  }

  // optional int64 operation_timeout_in_ms = 2;
  if (this->operation_timeout_in_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->operation_timeout_in_ms(), output);
  }

  // optional bool use_per_session_threads = 3;
  if (this->use_per_session_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_per_session_threads(), output);
  }

  // @@protoc_insertion_point(serialize_end:mr.ConfigProto)
}

::google::protobuf::uint8* ConfigProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mr.ConfigProto)
  // map<string, int32> device_count = 1;
  {
    ::google::protobuf::scoped_ptr<ConfigProto_DeviceCountEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->device_count().begin();
        it != this->device_count().end(); ++it) {
      entry.reset(device_count_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "mr.ConfigProto.DeviceCountEntry.key");
    }
  }

  // optional int64 operation_timeout_in_ms = 2;
  if (this->operation_timeout_in_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->operation_timeout_in_ms(), target);
  }

  // optional bool use_per_session_threads = 3;
  if (this->use_per_session_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_per_session_threads(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mr.ConfigProto)
  return target;
}

int ConfigProto::ByteSize() const {
  int total_size = 0;

  // optional int64 operation_timeout_in_ms = 2;
  if (this->operation_timeout_in_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->operation_timeout_in_ms());
  }

  // optional bool use_per_session_threads = 3;
  if (this->use_per_session_threads() != 0) {
    total_size += 1 + 1;
  }

  // map<string, int32> device_count = 1;
  total_size += 1 * this->device_count_size();
  {
    ::google::protobuf::scoped_ptr<ConfigProto_DeviceCountEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->device_count().begin();
        it != this->device_count().end(); ++it) {
      entry.reset(device_count_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfigProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigProto::MergeFrom(const ConfigProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  device_count_.MergeFrom(from.device_count_);
  if (from.operation_timeout_in_ms() != 0) {
    set_operation_timeout_in_ms(from.operation_timeout_in_ms());
  }
  if (from.use_per_session_threads() != 0) {
    set_use_per_session_threads(from.use_per_session_threads());
  }
}

void ConfigProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigProto::CopyFrom(const ConfigProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigProto::IsInitialized() const {

  return true;
}

void ConfigProto::Swap(ConfigProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigProto::InternalSwap(ConfigProto* other) {
  device_count_.Swap(&other->device_count_);
  std::swap(operation_timeout_in_ms_, other->operation_timeout_in_ms_);
  std::swap(use_per_session_threads_, other->use_per_session_threads_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigProto_descriptor_;
  metadata.reflection = ConfigProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigProto

// map<string, int32> device_count = 1;
int ConfigProto::device_count_size() const {
  return device_count_.size();
}
void ConfigProto::clear_device_count() {
  device_count_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
ConfigProto::device_count() const {
  // @@protoc_insertion_point(field_map:mr.ConfigProto.device_count)
  return device_count_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
ConfigProto::mutable_device_count() {
  // @@protoc_insertion_point(field_mutable_map:mr.ConfigProto.device_count)
  return device_count_.MutableMap();
}

// optional int64 operation_timeout_in_ms = 2;
void ConfigProto::clear_operation_timeout_in_ms() {
  operation_timeout_in_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConfigProto::operation_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:mr.ConfigProto.operation_timeout_in_ms)
  return operation_timeout_in_ms_;
}
 void ConfigProto::set_operation_timeout_in_ms(::google::protobuf::int64 value) {
  
  operation_timeout_in_ms_ = value;
  // @@protoc_insertion_point(field_set:mr.ConfigProto.operation_timeout_in_ms)
}

// optional bool use_per_session_threads = 3;
void ConfigProto::clear_use_per_session_threads() {
  use_per_session_threads_ = false;
}
 bool ConfigProto::use_per_session_threads() const {
  // @@protoc_insertion_point(field_get:mr.ConfigProto.use_per_session_threads)
  return use_per_session_threads_;
}
 void ConfigProto::set_use_per_session_threads(bool value) {
  
  use_per_session_threads_ = value;
  // @@protoc_insertion_point(field_set:mr.ConfigProto.use_per_session_threads)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mr

// @@protoc_insertion_point(global_scope)
